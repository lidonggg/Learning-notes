//
// 生命游戏（中等-289）
// 中文链接：https://leetcode-cn.com/problems/game-of-life
//
// 问题描述：
// 根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
// 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
// 1. 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
// 2. 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
// 3. 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
// 4. 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
// 根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。
//
// 示例：
// 输入：
// [
//  [0,1,0],
//  [0,0,1],
//  [1,1,1],
//  [0,0,0]
// ]
// 输出：
// [
//  [0,0,0],
//  [1,0,1],
//  [0,1,1],
//  [0,1,0]
// ]
// 
// 进阶：
// 1. 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
// 2. 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
//
// @author Ls J
// @date 8/12/20 9:19 PM
//
package array

import "fmt"

//
// 利用中间值进行标记
//
// 执行用时：0 ms，在所有 Go 提交中击败了 100.00% 的用户
// 内存消耗：2 MB，在所有 Go 提交中击败了 71.43% 的用户
//
func gameOfLife(board [][]int) {
    m := len(board)
    if m == 0 {
        return
    }
    n := len(board[0])
    if n == 0 {
        return
    }

    dx, dy := []int{-1, 0, 1}, []int{-1, 0, 1}
    // 规定
    // 2 -- 本来是活的，马上要死了
    // 3 -- 本来是死的，马上要活了
    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            // 周围存活的细胞个数
            as := 0
            // 注意这里的遍历技巧
            for x := 0; x < 3; x++ {
                for y := 0; y < 3; y++ {
                    nx, ny := i+dx[x], j+dy[y]
                    if nx >= 0 && nx < m && ny >= 0 && ny < n && (board[nx][ny] == 1 || board[nx][ny] == 2) {
                        as++
                    }
                }
            }
            fmt.Print(as)
            cur := board[i][j]
            if cur == 1 {
                // 上面在遍历8个方向的时候，自己本身也被加进去了，所以这里要减去 1
                as--
                if as < 2 || as > 3 {
                    board[i][j] = 2
                }
            } else if cur == 0 {
                if as == 3 {
                    board[i][j] = 3
                }
            }
        }
    }

    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            if board[i][j] == 2 {
                board[i][j] = 0
            } else if board[i][j] == 3 {
                board[i][j] = 1
            }
        }
    }
}
